import java.util.ArrayList;
import beaver.*;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "cool.grammar".
 */
public class cool extends Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short ID = 1;
		static public final short LPAREN = 2;
		static public final short LBRACE = 3;
		static public final short MINUS = 4;
		static public final short NULL = 5;
		static public final short IF = 6;
		static public final short WHILE = 7;
		static public final short SUPER = 8;
		static public final short NEW = 9;
		static public final short NOT = 10;
		static public final short INTEGER = 11;
		static public final short STRING = 12;
		static public final short BOOLEAN = 13;
		static public final short THIS = 14;
		static public final short RPAREN = 15;
		static public final short VAR = 16;
		static public final short COLON = 17;
		static public final short TYPE = 18;
		static public final short SEMI = 19;
		static public final short RBRACE = 20;
		static public final short ASSIGN = 21;
		static public final short EOF = 22;
		static public final short COMMA = 23;
		static public final short DOT = 24;
		static public final short ARROW = 25;
		static public final short NATIVE = 26;
		static public final short MATCH = 27;
		static public final short LE = 28;
		static public final short LT = 29;
		static public final short EQUALS = 30;
		static public final short TIMES = 31;
		static public final short DIV = 32;
		static public final short PLUS = 33;
		static public final short DEF = 34;
		static public final short CASE = 35;
		static public final short ELSE = 36;
		static public final short OVERRIDE = 37;
		static public final short CLASS = 38;
		static public final short EXTENDS = 39;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pjbtTy54KKnt#xTxc48XUIN4A2eIG14ewGG2W7HAI3zDuxqekWOa6Qg2XA4GGKHR2XABt" +
		"t3e5054KHArOi23OGKS3njtDpoTwPs#EZ$aa#d#zxRzvxysPsTcPl0kXJKGkTS1lwe1lwud" +
		"OqGZFqHdVqG4$qGZHQeoHMmYvEM#PDObuft8pO47dJO4CHJCMzk0$tOm8Um4JiG8nL7o5Os" +
		"wfc638iutKjerqjexj2ZEq84QyJ8cwiMMNKHXMaIRiqTcCF5bZsUKJ67cDi1kR8sAFvCQj#" +
		"DsB1zgxtBOJpBRHKzYJQ8vHTdFPOJCRTzCQZhD$UdIR#uZlsty#Rc5aKsG6Pjo02srJ5crZ" +
		"nBcLlehsPvsmoIl2SbS4YH7B4fr1CPTUJCbtA6bBUAcK7r1VNi4XSWfFPXgUpbFsb72Zb42" +
		"cdIFc4bBEad2lbqr9kW8vaL403iGAZC8nFyoB6uHKqn1jOAtx30QHW5POX2Yjm52$WeBY81" +
		"4o72t4uXaJQvL4EIQY8L5J2IBXH5PceXYnKXmSrqHXDq9HLcvCMQ8KsQ8lsw89sw8UE68pX" +
		"683n68IX68qxS2V6CEyUrdmG3#5XsXuyZfcOZISn3$En4C$WMQxHKZo7vx44Y$6g#0ulYJD" +
		"u3I#BRx5SV8tNiLryWvrOXzLOmxNSYFNOWgqu9AvYB$PZdxYC71p64K3yZbneN04RxFoEEB" +
		"W78lXzAihLBywtL89F4iddoEBJnLZcsPcNoZDSEKHUASHo9KjptHFvhijovSfp1HCi#u2rh" +
		"U9H8UBE$n3LGzIk6I8UghztpLmy0#dAThA7zNhSYFs$CRjQ#GpJMx2RR9kqgtBlsdck$VUk" +
		"iP$r09#DNZVVexytZb#7WZCIM3sJzOrpLerVabhqLU1iVDd1P6sEdKHYc6sTQItho3Fhv1T" +
		"Qu$heKZevNoTlFh6KoV9R5oCzXZ#MStNnYnrDEvMsZTzb3tFZUHAJfLzZoyMMctOfjjoi6a" +
		"NSSYGZvfJjQ18lJs2A72rUrZ3oZ9hUVWPEnWsPgQediLMFcIxsoIObwTFOzbfHSemCwWHcs" +
		"uYBuqRp7XIhiYBbgIp9crKasq3UL0eXn3cgygGzQKjc0jeiCeDsHUeb98SS9ij8BiaZbybE" +
		"8W1TPsubwWYZ9dKHh#O#W3QHEbUrJx4zdSnbJgBAjR5zNjaQuTpqQ5ACZeRA7wFwTw3jKhv" +
		"K4ayII2mTPwXBgxoLXbRs0A$M5fjy5zY#MD3MuqW6oLHjheTUNQsFyNn9ob#B6C#PHb9Omv" +
		"XlPLLpB6sthwOLpAlBlaxgQjI9r6MKFvjjDtKDrURwOugoxIIBr2HLw9YZ$EaKIvNTW3GBF" +
		"RvMH#KtLxeLQQtii82vSazepQaRKNUXhghyV1VQ8EgcgbsROWrrOzLkedGtqfsq8Ir92#KF" +
		"9#q8zvtUaRMkK7Sc0yX0OepLbVvhr3t84DfNgJkHNgf6JzAR$d7KVTHxCFPENz9VvGnJUXJ" +
		"fHsEhQeydGybWudlMuMG4cK16aj74eM9ZrDeTzbyVtcMuBgQrdUBRQzJppBdSIgTDzjL2tW" +
		"ldelr0mzV$4bb0VYau8zhPm7wckImCgBSyUAwsei3MTPD$MI6vgmkluLqRPHTLkJqinbndi" +
		"hS7omlITvVIUmFy1mBQ$OBq7sooPvlcNUOwnivHkN6cVhvlGaeX#Ufxf#K5#8#R#bTW#qJX" +
		"u#db2l4bXvhdzS9nJvhi#K7caArqtNy$3l9WyISkIFchQd6FYv$5AV4#zGboKhn7#RQChSt" +
		"lSrgi5f#AZsbz8Zxog$Q1s2Ho17#Hn5VaI$6vz7uXFbFn7L9kbtARNyyFfTmgDeijOgFO8D" +
		"QBTUAWs6$AsAlqRZc3bQRPh95obMoz9TuKUUAOE2fonH71tqlnBdb7nevpTeV40R7FL7MFq" +
		"hkK$edyQ8gVjLezcN4#tpgdDByUudjbNycF$kdNwm#fElFke$CUP2VXnC5xlKuC7SvxGnXn" +
		"y4QX4nknyuwc4PrtDfl2Ri8XTIPrbhof68GH1syhTXAcRZOsOkSzJYSs6BzUwQoRpdOLYN4" +
		"tDFuhZ#0jJIEwmiPxeaxCsi3EsvWMb3JcfZ4lBT$sQGS99tOInZkTJenRiSs4flpQFwZ1k8" +
		"SrFApXOJyFQzJ$6uLiVfy=");

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	static final Action RETURN4 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 4];
		}
	};

	static final Action RETURN7 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 7];
		}
	};

	static final Action RETURN6 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 6];
		}
	};

	static final Action RETURN5 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 5];
		}
	};

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

	static final Action RETURN8 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 8];
		}
	};

	private final Action[] actions;

	public cool() {
		super(PARSING_TABLES);
		actions = new Action[] {
			RETURN2,	// [0] program = classdecl EOF; returns 'EOF' although none is marked
			RETURN4,	// [1] classdecl = CLASS TYPE varformals classbody; returns 'classbody' although none is marked
			RETURN7,	// [2] classdecl = CLASS TYPE varformals EXTENDS TYPE actuals classbody; returns 'classbody' although none is marked
			RETURN6,	// [3] classdecl = CLASS TYPE varformals EXTENDS NATIVE classbody; returns 'classbody' although none is marked
			RETURN2,	// [4] varformals = LPAREN RPAREN; returns 'RPAREN' although none is marked
			RETURN6,	// [5] varformals = LPAREN VAR ID COLON TYPE RPAREN; returns 'RPAREN' although none is marked
			RETURN7,	// [6] varformals = LPAREN varformals_sub1 VAR ID COLON TYPE RPAREN; returns 'RPAREN' although none is marked
			RETURN5,	// [7] varformals_sub1 = VAR ID COLON TYPE COMMA; returns 'COMMA' although none is marked
			RETURN6,	// [8] varformals_sub1 = varformals_sub1 VAR ID COLON TYPE COMMA; returns 'COMMA' although none is marked
			RETURN2,	// [9] classbody = LBRACE RBRACE; returns 'RBRACE' although none is marked
			RETURN3,	// [10] classbody = LBRACE feature RBRACE; returns 'RBRACE' although none is marked
			RETURN4,	// [11] classbody = LBRACE classbody_sub1 feature RBRACE; returns 'RBRACE' although none is marked
			new Action() {	// [12] classbody_sub1 = feature
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			new Action() {	// [13] classbody_sub1 = classbody_sub1 feature
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
				}
			},
			RETURN3,	// [14] feature = feature_sub1 NATIVE SEMI; returns 'SEMI' although none is marked
			RETURN3,	// [15] feature = feature_sub1 expr SEMI; returns 'SEMI' although none is marked
			RETURN4,	// [16] feature = OVERRIDE feature_sub1 NATIVE SEMI; returns 'SEMI' although none is marked
			RETURN4,	// [17] feature = OVERRIDE feature_sub1 expr SEMI; returns 'SEMI' although none is marked
			RETURN4,	// [18] feature = feature_sub2 ASSIGN NATIVE SEMI; returns 'SEMI' although none is marked
			RETURN6,	// [19] feature = feature_sub2 COLON TYPE ASSIGN expr SEMI; returns 'SEMI' although none is marked
			RETURN4,	// [20] feature = LBRACE block RBRACE SEMI; returns 'SEMI' although none is marked
			RETURN6,	// [21] feature_sub1 = DEF ID formals COLON TYPE ASSIGN; returns 'ASSIGN' although none is marked
			RETURN2,	// [22] feature_sub2 = VAR ID; returns 'ID' although none is marked
			RETURN2,	// [23] formals = LPAREN RPAREN; returns 'RPAREN' although none is marked
			RETURN5,	// [24] formals = LPAREN ID COLON TYPE RPAREN; returns 'RPAREN' although none is marked
			RETURN6,	// [25] formals = LPAREN formals_sub1 ID COLON TYPE RPAREN; returns 'RPAREN' although none is marked
			RETURN4,	// [26] formals_sub1 = ID COLON TYPE COMMA; returns 'COMMA' although none is marked
			RETURN5,	// [27] formals_sub1 = formals_sub1 ID COLON TYPE COMMA; returns 'COMMA' although none is marked
			RETURN2,	// [28] actuals = LPAREN RPAREN; returns 'RPAREN' although none is marked
			RETURN3,	// [29] actuals = LPAREN expr RPAREN; returns 'RPAREN' although none is marked
			RETURN4,	// [30] actuals = LPAREN actuals_sub1 expr RPAREN; returns 'RPAREN' although none is marked
			RETURN2,	// [31] actuals_sub1 = expr COMMA; returns 'COMMA' although none is marked
			RETURN3,	// [32] actuals_sub1 = actuals_sub1 expr COMMA; returns 'COMMA' although none is marked
			Action.NONE,  	// [33] block = 
			Action.RETURN,	// [34] block = expr
			RETURN2,	// [35] block = block_sub1 expr; returns 'expr' although none is marked
			RETURN2,	// [36] block_sub1 = expr SEMI; returns 'SEMI' although none is marked
			RETURN3,	// [37] block_sub1 = block_sub1 expr SEMI; returns 'SEMI' although none is marked
			RETURN7,	// [38] block_sub1 = VAR ID COLON TYPE ASSIGN expr SEMI; returns 'SEMI' although none is marked
			RETURN8,	// [39] block_sub1 = block_sub1 VAR ID COLON TYPE ASSIGN expr SEMI; returns 'SEMI' although none is marked
			Action.RETURN,	// [40] expr = primary
			RETURN2,	// [41] expr = primary expr_sub1; returns 'expr_sub1' although none is marked
			RETURN2,	// [42] expr = expr_sub2 primary; returns 'primary' although none is marked
			RETURN3,	// [43] expr = expr_sub2 primary expr_sub1; returns 'expr_sub1' although none is marked
			RETURN2,	// [44] expr_sub1 = expr_sub1_1 expr; returns 'expr' although none is marked
			RETURN3,	// [45] expr_sub1 = expr_sub1 expr_sub1_1 expr; returns 'expr' although none is marked
			RETURN2,	// [46] expr_sub1 = MATCH cases; returns 'cases' although none is marked
			RETURN3,	// [47] expr_sub1 = expr_sub1 MATCH cases; returns 'cases' although none is marked
			RETURN3,	// [48] expr_sub1 = DOT ID actuals; returns 'actuals' although none is marked
			RETURN4,	// [49] expr_sub1 = expr_sub1 DOT ID actuals; returns 'actuals' although none is marked
			Action.RETURN,	// [50] expr_sub1_1 = LE
			Action.RETURN,	// [51] expr_sub1_1 = LT
			Action.RETURN,	// [52] expr_sub1_1 = EQUALS
			Action.RETURN,	// [53] expr_sub1_1 = TIMES
			Action.RETURN,	// [54] expr_sub1_1 = DIV
			Action.RETURN,	// [55] expr_sub1_1 = PLUS
			Action.RETURN,	// [56] expr_sub1_1 = MINUS
			RETURN2,	// [57] expr_sub2 = ID ASSIGN; returns 'ASSIGN' although none is marked
			RETURN3,	// [58] expr_sub2 = expr_sub2 ID ASSIGN; returns 'ASSIGN' although none is marked
			Action.RETURN,	// [59] expr_sub2 = NOT
			RETURN2,	// [60] expr_sub2 = expr_sub2 NOT; returns 'NOT' although none is marked
			Action.RETURN,	// [61] expr_sub2 = MINUS
			RETURN2,	// [62] expr_sub2 = expr_sub2 MINUS; returns 'MINUS' although none is marked
			RETURN6,	// [63] expr_sub2 = IF LPAREN expr RPAREN expr ELSE; returns 'ELSE' although none is marked
			RETURN7,	// [64] expr_sub2 = expr_sub2 IF LPAREN expr RPAREN expr ELSE; returns 'ELSE' although none is marked
			RETURN4,	// [65] expr_sub2 = WHILE LPAREN expr RPAREN; returns 'RPAREN' although none is marked
			RETURN5,	// [66] expr_sub2 = expr_sub2 WHILE LPAREN expr RPAREN; returns 'RPAREN' although none is marked
			RETURN2,	// [67] primary = ID actuals; returns 'actuals' although none is marked
			RETURN4,	// [68] primary = SUPER DOT ID actuals; returns 'actuals' although none is marked
			RETURN3,	// [69] primary = NEW TYPE actuals; returns 'actuals' although none is marked
			RETURN3,	// [70] primary = LBRACE block RBRACE; returns 'RBRACE' although none is marked
			RETURN3,	// [71] primary = LPAREN expr RPAREN; returns 'RPAREN' although none is marked
			Action.RETURN,	// [72] primary = NULL
			RETURN2,	// [73] primary = LPAREN RPAREN; returns 'RPAREN' although none is marked
			Action.RETURN,	// [74] primary = ID
			Action.RETURN,	// [75] primary = INTEGER
			Action.RETURN,	// [76] primary = STRING
			Action.RETURN,	// [77] primary = BOOLEAN
			Action.RETURN,	// [78] primary = THIS
			RETURN3,	// [79] cases = LBRACE cases_sub1 RBRACE; returns 'RBRACE' although none is marked
			RETURN6,	// [80] cases_sub1 = CASE ID COLON TYPE ARROW block; returns 'block' although none is marked
			RETURN7,	// [81] cases_sub1 = cases_sub1 CASE ID COLON TYPE ARROW block; returns 'block' although none is marked
			RETURN4,	// [82] cases_sub1 = CASE NULL ARROW block; returns 'block' although none is marked
			RETURN5	// [83] cases_sub1 = cases_sub1 CASE NULL ARROW block; returns 'block' although none is marked
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
